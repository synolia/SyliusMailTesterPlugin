name: CI

on:
    push:
        branches: [master]
        paths-ignore:
            - README.md
    pull_request:
        paths-ignore:
            - README.md

jobs:

    analysis:
        name: PHP ${{ matrix.php }} Symfony ${{ matrix.symfony }}
        runs-on: ubuntu-18.04

        strategy:
            fail-fast: false
            matrix:
                php: [7.4, 8.0, 8.1]
                symfony: [4.4.*, 5.4.*]

        env:
            APP_ENV: test

        steps:
            - uses: actions/checkout@v2

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "${{ matrix.php }}"
                  tools: symfony
                  coverage: none

            - name: Composer - Get Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Composer - Set cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json') }}
                  restore-keys: |
                      php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            - name: Composer - Validate composer.json and composer.lock
              run: composer validate --strict

            - name: Composer - Github Auth
              run: composer config -g github-oauth.github.com ${{ github.token }}

            - name: Composer - Restrict Symfony version
              run: composer config extra.symfony.require "${{ matrix.symfony }}"

            - name: Composer - Update dependencies
              run: composer update --no-progress
              id: end-of-setup

            - name: ECS - Run
              run: if [ -f ruleset/ecs.php ]; then vendor/bin/ecs check src/ tests/Behat/ --no-progress-bar -c ruleset/ecs.php ; else echo Ecs ruleset file does not exist, skipping step ; fi
              if: always() && steps.end-of-setup.outcome == 'success'

            - name: PHPStan - Run
              run: if [ -f ruleset/phpstan.neon ]; then vendor/bin/phpstan analyse -c ruleset/phpstan.neon src/ ; else echo PHPStan ruleset file does not exist, skipping step ; fi
              if: always() && steps.end-of-setup.outcome == 'success'

            - name: PHPSpec - Run
              run: if [ -f phpspec.yml.dist ]; then vendor/bin/phpspec run ; else echo PHPSpec config file does not exist, skipping step ; fi
              if: always() && steps.end-of-setup.outcome == 'success'

            - name: PHPMD - Run
              run: if [ -f ruleset/.php_md.xml ]; then vendor/bin/phpmd src ansi ruleset/.php_md.xml ; else echo PHPMD config file does not exist, skipping step ; fi
              if: always() && steps.end-of-setup.outcome == 'success'

            - name: GrumPHP - Run
              run: (test -f grumphp.yml && vendor/bin/grumphp run) || echo Grumphp ruleset file does not exist, skipping step
              if: always() && steps.end-of-setup.outcome == 'success'

            - name: Checks security issues - Run
              run: symfony security:check
              if: always() && steps.end-of-setup.outcome == 'success'

    sylius:
        name: PHPUnit-Behat (PHP ${{ matrix.php }} Sylius ${{ matrix.sylius }} Symfony ${{ matrix.symfony }})
        runs-on: ubuntu-18.04
        strategy:
            fail-fast: false
            matrix:
                php: [7.4, 8.0, 8.1]
                sylius: [1.9.0, 1.10.0, 1.11.0]
                symfony: [4.4, 5.4]
                node: [10.x]
                exclude:
                    - sylius: 1.9.0
                      php: 8.0
                    - sylius: 1.9.0
                      php: 8.1
                    - sylius: 1.11.0
                      symfony: 4.4
                    - sylius: 1.11.0
                      php: 7.4
        env:
            APP_ENV: test
            package-name: synolia/sylius-mail-tester-plugin

        steps:
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "${{ matrix.php }}"
                  ini-values: date.timezone=UTC
                  extensions: intl
                  tools: symfony
                  coverage: none

            - name: Setup Node
              uses: actions/setup-node@v1
              with:
                  node-version: "${{ matrix.node }}"

            - uses: actions/checkout@v2

            - name: Composer - Get Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Composer - Set cache
              uses: actions/cache@v2
              id: cache-composer
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: php-${{ matrix.php }}-sylius-${{ matrix.sylius }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json') }}
                  restore-keys: php-${{ matrix.php }}-sylius-${{ matrix.sylius }}-symfony-${{ matrix.symfony }}-composer-

            - name: Composer - Create cache directory
              run: mkdir -p /home/runner/.composer/cache
              if: steps.cache-composer.outputs.cache-hit != 'true'

            - name: Composer - Github Auth
              run: composer config -g github-oauth.github.com ${{ github.token }}

            - name: Yarn - Get cache directory
              id: yarn-cache
              run: echo "::set-output name=dir::$(yarn cache dir)"

            - name: Yarn - Set Cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache.outputs.dir }}
                  key: node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
                  restore-keys: |
                      node-${{ matrix.node }}-yarn-

            - name: Install Sylius-Standard and Plugin
              run: make install -e SYLIUS_VERSION=${{ matrix.sylius }} SYMFONY_VERSION=${{ matrix.symfony }} PHP_VERSION=${{ matrix.php }}

            - name: Output PHP version for Symfony CLI
              working-directory: ./tests/Application
              run: php -v | head -n 1 | awk '{ print $2 }' > .php-version

            - name: Install certificates
              working-directory: ./tests/Application
              run: symfony server:ca:install

            - name: Run Chrome headless
              working-directory: ./tests/Application
              run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' https://127.0.0.1 > /dev/null 2>&1 &

            - name: Run webserver
              working-directory: ./tests/Application
              run: symfony server:start --port=8080 --dir=public --daemon
              id: end-of-setup-sylius

            - name: Doctrine Schema Validate - Run
              working-directory: ./tests/Application
              run: php bin/console doctrine:schema:validate --skip-sync
              if: always() && steps.end-of-setup-sylius.outcome == 'success'

            - name: Run PHPUnit
              run: make phpunit
              if: always() && steps.end-of-setup-sylius.outcome == 'success'

            - name: Configure Behat
              run: make behat-configure
              if: always() && steps.end-of-setup-sylius.outcome == 'success'

            - name: Run behat
              working-directory: ./tests/Application
              run: vendor/bin/behat --strict --no-interaction -f progress || vendor/bin/behat --strict -vvv --no-interaction --rerun
              if: always() && steps.end-of-setup-sylius.outcome == 'success'

            - uses: actions/upload-artifact@v2.1.4
              if: failure()
              with:
                  name: logs
                  path: ./tests/Application/etc/build

        services:
            mariadb:
                image: mariadb:10.4.11
                ports:
                    - 3306:3306
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: true
                options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
